name: Build Kivy Android APK

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main # Trigger on pull requests targeting the main branch
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build_android_apk:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java Development Kit (JDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Recommended distribution
          java-version: '17' # Android API 33 often requires JDK 17

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Using 3.9, which is generally compatible with Kivy/Buildozer

      - name: Install Buildozer and its dependencies
        run: |
          pip install buildozer cython
          sudo apt-get update
          sudo apt-get install -y git zip unzip openjdk-17-jdk autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev liblzma-dev libffi-dev libssl-dev

      - name: Add Google AI API Key to environment (if not already set)
        # IMPORTANT: Replace "GOOGLE_AI_API_KEY_SECRET" with the actual name of your GitHub Secret.
        run: echo "${{ secrets.GOOGLE_AI_API_KEY_SECRET }}" > .env_api_key_temp # Use secrets!

      - name: Force correct buildozer.spec settings
        run: |
          echo "Checking buildozer.spec settings..."

          # Backup original
          cp buildozer.spec buildozer.spec.backup

          # Force the correct versions - use 33.0.2 as specified
          # Keep android.build_tools_version = 33.0.2
          # Keep android.api = 33
          # *** CHANGE NDK VERSION HERE ***
          sed -i 's/^android\.build_tools_version.*$/android.build_tools_version = 33.0.2/' buildozer.spec
          sed -i 's/^android\.api.*$/android.api = 33/' buildozer.spec
          sed -i 's/^android\.ndk_version.*$/android.ndk_version = 23.1.7779620/' buildozer.spec # Changed to 23b

          # Add these lines if they don't exist (using 'grep -q' to check for existence)
          grep -q "^android\.build_tools_version" buildozer.spec || echo "android.build_tools_version = 33.0.2" >> buildozer.spec
          grep -q "^android\.api" buildozer.spec || echo "android.api = 33" >> buildozer.spec
          grep -q "^android\.ndk_version" buildozer.spec || echo "android.ndk_version = 23.1.7779620" >> buildozer.spec # Changed to 23b

          # Show the relevant lines
          echo "Current buildozer.spec Android settings:"
          grep -E "(android.api|android.build_tools_version|android.ndk_version)" buildozer.spec

      - name: Ensure Android SDK Tools are present and accept licenses
        run: |
          SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
          CMDLINE_TOOLS_BASE_DIR="$SDK_ROOT/cmdline-tools"
          CMDLINE_TOOLS_LATEST_DIR="$CMDLINE_TOOLS_BASE_DIR/latest"
          FINAL_CMDLINE_BIN_DIR="$CMDLINE_TOOLS_LATEST_DIR/bin" # The definitive cmdline-tools bin directory
          SDKMANAGER="$FINAL_CMDLINE_BIN_DIR/sdkmanager"
          TEMP_UNZIP_DIR="$HOME/.buildozer/android/platform/temp_unzip"
          BUILD_TOOLS_VERSION="33.0.2" # Define build tools version for clarity and reusability
          # *** CHANGE NDK VERSION HERE ***
          NDK_VERSION="23.1.7779620" # Changed to 23b

          echo "Attempting to create SDK directories and download command-line tools..."
          mkdir -p "$SDK_ROOT"
          
          if [ ! -d "$CMDLINE_TOOLS_LATEST_DIR" ]; then
            echo "Downloading Android SDK command-line tools..."
            mkdir -p "$TEMP_UNZIP_DIR"
            cd "$TEMP_UNZIP_DIR"
            
            curl -o cmdline-tools.zip "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
            unzip cmdline-tools.zip
            
            # --- Start of robust 'bin' extraction logic ---
            # Create the final target bin directory for cmdline tools
            mkdir -p "$FINAL_CMDLINE_BIN_DIR"

            # Check if 'latest/bin/' exists after unzip and move its contents
            if [ -d "./latest/bin" ] && [ "$(ls -A ./latest/bin)" ]; then
              echo "Moving contents from ./latest/bin to $FINAL_CMDLINE_BIN_DIR"
              mv ./latest/bin/* "$FINAL_CMDLINE_BIN_DIR/"
            elif [ -d "./cmdline-tools/latest/bin" ] && [ "$(ls -A ./cmdline-tools/latest/bin)" ]; then
              echo "Moving contents from ./cmdline-tools/latest/bin to $FINAL_CMDLINE_BIN_DIR"
              mv ./cmdline-tools/latest/bin/* "$FINAL_CMDLINE_BIN_DIR/"
            elif [ -d "./bin" ] && [ "$(ls -A ./bin)" ]; then
              echo "Moving contents from ./bin to $FINAL_CMDLINE_BIN_DIR"
              mv ./bin/* "$FINAL_CMDLINE_BIN_DIR/"
            else
              echo "Error: Could not find 'bin' directory with sdkmanager in unzipped cmdline-tools."
              ls -R . # List contents for debugging
              exit 1
            fi
            # --- End of robust 'bin' extraction logic ---
            rm -rf "$TEMP_UNZIP_DIR" # Clean up temp directory right after move
          fi

          # Change to SDK_ROOT before continuing, ensures consistent base path
          cd "$SDK_ROOT"

          echo "Ensuring SDKMANAGER path is correct: $SDKMANAGER"
          if [ ! -f "$SDKMANAGER" ]; then
            echo "Error: sdkmanager not found at $SDKMANAGER. Check paths or download."
            ls -la "$FINAL_CMDLINE_BIN_DIR" # List contents of the bin directory
            exit 1
          fi

          # Ensure sdkmanager is executable (sometimes permissions get lost)
          chmod +x "$SDKMANAGER"

          echo "Accepting all Android SDK licenses..."
          mkdir -p "$SDK_ROOT/licenses"
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > "$SDK_ROOT/licenses/android-sdk-license"
          echo "84831b9409646a918e30573bab4c9c91346d8abd" > "$SDK_ROOT/licenses/android-sdk-preview-license"
          echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > "$SDK_ROOT/licenses/android-sdk-arm-dbt-license"
          echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$SDK_ROOT/licenses/android-googletv-license"
          echo "79120722343a6f314e0719f863036c702b0e6b2a" > "$SDK_ROOT/licenses/android-sdk-preview-license-old"
          echo "504667f4c0de7af1a06de9f4b1727b84351f2910" > "$SDK_ROOT/licenses/android-sdk-license-old"

          yes | "$SDKMANAGER" --licenses || true
          yes | "$SDKMANAGER" --licenses || true
          yes | "$SDKMANAGER" --licenses || true

          echo "Installing/Updating specific Android SDK components..."
          # Install the 'tools' package first, which might resolve the 'android' command issue
          echo "Installing 'tools' package for broader compatibility..."
          "$SDKMANAGER" "tools" || true

          "$SDKMANAGER" "build-tools;$BUILD_TOOLS_VERSION" || true
          "$SDKMANAGER" "platform-tools" || true
          "$SDKMANAGER" "platforms;android-33" || true
          # *** CHANGE NDK VERSION HERE ***
          "$SDKMANAGER" "ndk;$NDK_VERSION" || true 

          echo "Listing installed SDK components to verify..."
          "$SDKMANAGER" --list | grep "build-tools"
          "$SDKMANAGER" --list | grep "platform-tools"
          "$SDKMANAGER" --list | grep "ndk"
          ls -la "$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" || echo "Build-tools $BUILD_TOOLS_VERSION directory not found after explicit install."
          ls -la "$SDK_ROOT/platform-tools" || echo "Platform-tools directory not found after explicit install."
          ls -la "$SDK_ROOT/ndk/$NDK_VERSION" || echo "NDK $NDK_VERSION directory not found after explicit install."

          # --- Add ALL necessary Android SDK tool directories to PATH ---
          echo "Adding Android SDK tool directories to PATH for all subsequent steps..."
          echo "$SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" >> $GITHUB_PATH
          echo "$FINAL_CMDLINE_BIN_DIR" >> $GITHUB_PATH # Add cmdline-tools/latest/bin
          echo "$SDK_ROOT/ndk/$NDK_VERSION" >> $GITHUB_PATH # Add NDK root for tools like ndk-build, if necessary

          # --- Ensure common binaries are executable ---
          echo "Ensuring common Android SDK binaries are executable..."
          chmod +x "$SDK_ROOT/platform-tools/adb" || true
          find "$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" -type f -name "aapt*" -exec chmod +x {} \; || true
          find "$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" -type f -name "aidl*" -exec chmod +x {} \; || true
          find "$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" -type f -name "apksigner*" -exec chmod +x {} \; || true
          find "$SDK_ROOT/build_tools/$BUILD_TOOLS_VERSION" -type f -name "zipalign*" -exec chmod +x {} \; || true

          # Verify PATH update and check tools
          echo "Current PATH after modifications:"
          echo "$PATH"
          echo "Verifying tool execution:"
          adb version || echo "adb not found after PATH update."
          aapt version || echo "aapt not found after PATH update."
          aidl || echo "aidl not found after PATH update." 
          apksigner || echo "apksigner not found after PATH update."
          zipalign || echo "zipalign not found after PATH update."

          # --- Set ANDROID_HOME and ANDROID_NDK_HOME environment variables ---
          echo "Setting ANDROID_HOME and ANDROID_NDK_HOME environment variables..."
          echo "ANDROID_HOME=$SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$SDK_ROOT/ndk/$NDK_VERSION" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$SDK_ROOT" >> $GITHUB_ENV # Often used interchangeably with ANDROID_HOME
          
          # Verify environment variables (optional, for debugging)
          echo "ANDROID_HOME is: $ANDROID_HOME"
          echo "ANDROID_NDK_HOME is: $ANDROID_NDK_HOME"
          echo "ANDROID_SDK_ROOT is: $ANDROID_SDK_ROOT"

      - name: Configure Buildozer and Download remaining SDK/NDK (if any)
        # This step runs buildozer for the first time to set up any other Android SDK and NDK components
        # that Buildozer itself might manage or verify.
        run: |
          echo "Running buildozer android debug clean and update after SDK setup..."
          # Clean and update should now correctly find/verify components
          # These commands should now succeed or provide new errors
          buildozer android debug clean || true
          buildozer android debug update || true

      - name: Build Android APK
        # This is the actual build command. It uses the configured buildozer.spec.
        run: buildozer android debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: HushOS-APK
          path: bin/*.apk # Buildozer outputs APKs into the 'bin' directory
