name: Build Kivy Android APK

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main # Trigger on pull requests targeting the main branch
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build_android_apk:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java Development Kit (JDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Recommended distribution
          java-version: '17' # Android API 33 often requires JDK 17

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Using 3.9, which is generally compatible with Kivy/Buildozer

      - name: Install Buildozer and its dependencies
        run: |
          pip install buildozer cython
          sudo apt-get update
          sudo apt-get install -y git zip unzip openjdk-17-jdk autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev liblzma-dev libffi-dev libssl-dev

      - name: Add Google AI API Key to environment (if not already set)
        # This is a placeholder. You should securely set this as a GitHub Secret.
        # Replace 'YOUR_GOOGLE_AI_API_KEY' with the actual secret name if you've set it.
        run: echo "AIzaSyB9_xVbsDjJN81reI73_KvqIOhXyKAsFNU" > .env_api_key_temp # DO NOT DO THIS IN PRODUCTION, USE SECRETS!

      - name: Force correct buildozer.spec settings
        run: |
          # Ensure our buildozer.spec has the correct versions and prevent version 36
          echo "Checking buildozer.spec settings..."
          
          # Backup original
          cp buildozer.spec buildozer.spec.backup
          
          # Force the correct versions
          sed -i 's/android.build_tools_version.*/android.build_tools_version = 33.0.2/' buildozer.spec
          sed -i 's/android.api.*/android.api = 33/' buildozer.spec
          sed -i 's/android.ndk_version.*/android.ndk_version = 25.2.9519653/' buildozer.spec
          
          # Add these lines if they don't exist
          grep -q "android.build_tools_version" buildozer.spec || echo "android.build_tools_version = 33.0.2" >> buildozer.spec
          grep -q "android.api" buildozer.spec || echo "android.api = 33" >> buildozer.spec
          grep -q "android.ndk_version" buildozer.spec || echo "android.ndk_version = 25.2.9519653" >> buildozer.spec
          
          # Show the relevant lines
          echo "Current buildozer.spec Android settings:"
          grep -E "(android.api|android.build_tools_version|android.ndk_version)" buildozer.spec

      - name: Configure Buildozer and Download SDK/NDK
        # This step runs buildozer for the first time to set up the Android SDK and NDK.
        # It will take some time as it downloads necessary components.
        run: |
          buildozer android debug clean
          buildozer android debug update

      - name: Accept ALL Android SDK licenses and install components
        run: |
          # First, accept all licenses with multiple methods to ensure it works
          echo "Accepting all Android SDK licenses..."
          
          # Method 1: Create license files directly BEFORE any sdkmanager calls
          mkdir -p $HOME/.buildozer/android/platform/android-sdk/licenses
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $HOME/.buildozer/android/platform/android-sdk/licenses/android-sdk-license
          echo "84831b9409646a918e30573bab4c9c91346d8abd" > $HOME/.buildozer/android/platform/android-sdk/licenses/android-sdk-preview-license
          echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > $HOME/.buildozer/android/platform/android-sdk/licenses/android-sdk-arm-dbt-license
          echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > $HOME/.buildozer/android/platform/android-sdk/licenses/android-googletv-license
          echo "79120722343a6f314e0719f863036c702b0e6b2a" > $HOME/.buildozer/android/platform/android-sdk/licenses/android-sdk-preview-license-old
          echo "504667f4c0de7af1a06de9f4b1727b84351f2910" > $HOME/.buildozer/android/platform/android-sdk/licenses/android-sdk-license-old
          
          # Method 2: Use printf to send 'y' responses directly to sdkmanager
          SDKMANAGER="$HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/sdkmanager"
          
          # Accept licenses first
          printf 'y\ny\ny\ny\ny\ny\ny\ny\ny\ny\n' | $SDKMANAGER --licenses || true
          
          # Now install the specific components we need (NOT the latest versions)
          echo "Installing Android SDK components..."
          
          # Install build-tools version that matches buildozer.spec
          $SDKMANAGER "build-tools;33.0.2" || true
          
          # Install other potentially needed components
          $SDKMANAGER "platform-tools" || true
          $SDKMANAGER "platforms;android-33" || true
          
          # Install NDK version that matches buildozer.spec
          $SDKMANAGER "ndk;25.2.9519653" || true
          
          # Accept licenses again after installation
          printf 'y\ny\ny\ny\ny\ny\ny\ny\ny\ny\n' | $SDKMANAGER --licenses || true
          
          echo "Verifying build-tools installation..."
          ls -la $HOME/.buildozer/android/platform/android-sdk/build-tools/ || echo "Build-tools directory not found"
          
          # If build-tools still not found, try to manually create the directory structure
          if [ ! -d "$HOME/.buildozer/android/platform/android-sdk/build-tools/33.0.2" ]; then
            echo "Attempting to fix build-tools installation..."
            $SDKMANAGER --install "build-tools;33.0.2" || true
            
            # Last resort: check what build-tools versions are available
            echo "Available build-tools versions:"
            $SDKMANAGER --list | grep "build-tools" || echo "Could not list build-tools"
          fi

      - name: Build Android APK
        # This is the actual build command. It uses the configured buildozer.spec.
        run: buildozer android debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: HushOS-APK
          path: bin/*.apk # Buildozer outputs APKs into the 'bin' directory
