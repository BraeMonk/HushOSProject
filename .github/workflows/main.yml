name: Build Kivy Android APK

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main # Trigger on pull requests targeting the main branch
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build_android_apk:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean Buildozer cache
        run: |
          echo "Removing existing .buildozer directory to ensure clean build…"
          rm -rf "$HOME/.buildozer" || true
          rm -rf ".buildozer" || true # Also check local buildozer dir if present
        shell: bash

      - name: Set up Java Development Kit (JDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Recommended distribution
          java-version: '17' # Android API 33 often requires JDK 17

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Using 3.9, which is generally compatible with Kivy/Buildozer

      - name: Install Buildozer and its dependencies
        run: |
          pip install buildozer cython
          sudo apt-get update
          sudo apt-get install -y git zip unzip openjdk-17-jdk autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev liblzma-dev libffi-dev libssl-dev perl
          which perl || echo "perl not found in PATH after install!"
          
          python3 -m pip install --upgrade setuptools pip wheel
          
          echo "Verifying pip location:"
          which pip || echo "pip executable not found in PATH!"
          which pip3 || echo "pip3 executable not found in PATH!"
          python3 -c "import sysconfig; print(sysconfig.get_path('scripts'))" # Show where scripts like pip are
          ls -la "$(python3 -c "import sysconfig; print(sysconfig.get_path('scripts'))")" || true # List contents of scripts dir

      - name: Add Google AI API Key to environment (if not already set)
        run: echo "${{ secrets.GOOGLE_AI_API_KEY_SECRET }}" > .env_api_key_temp

      - name: Force correct buildozer.spec settings
        run: |
          echo "Checking buildozer.spec settings…"
          cp buildozer.spec buildozer.spec.backup
          sed -i 's/^android\.build_tools_version.*$/android.build_tools_version = 33.0.2/' buildozer.spec
          sed -i 's/^android\.api.*$/android.api = 33/' buildozer.spec
          sed -i 's/^android\.ndk_version.*$/android.ndk_version = 25b/' buildozer.spec 
          sed -i 's/^android\.min_sdk_version.*$/android.min_sdk_version = 21/' buildozer.spec
          
          grep -q "^android\.build_tools_version" buildozer.spec || echo "android.build_tools_version = 33.0.2" >> buildozer.spec
          grep -q "^android\.api" buildozer.spec || echo "android.api = 33" >> buildozer.spec
          grep -q "^android\.ndk_version" buildozer.spec || echo "android.ndk_version = 25b" >> buildozer.spec 
          grep -q "^android\.min_sdk_version" buildozer.spec || echo "android.min_sdk_version = 21" >> buildozer.spec 
          
          echo "Current buildozer.spec Android settings:"
          grep -E "(android.api|android.build_tools_version|android.ndk_version|android.min_sdk_version)" buildozer.spec

      - name: Ensure Android SDK Tools and NDK are present and accept licenses
        run: |
          SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
          TARGET_CMDLINE_TOOLS_DIR="$SDK_ROOT/cmdline-tools"
          FINAL_CMDLINE_TOOLS_ROOT="$TARGET_CMDLINE_TOOLS_DIR/latest"
          SDKMANAGER_MODERN="$FINAL_CMDLINE_TOOLS_ROOT/bin/sdkmanager"
          SDKMANAGER_LEGACY_DIR="$SDK_ROOT/tools/bin"
          SDKMANAGER_LEGACY_PATH="$SDKMANAGER_LEGACY_DIR/sdkmanager"

          TEMP_UNZIP_DIR="$HOME/.buildozer/android/platform/temp_unzip"
          BUILD_TOOLS_VERSION="33.0.2"
          NDK_VERSION_CODE="25b"
          NDK_URL="https://dl.google.com/android/repository/android-ndk-r${NDK_VERSION_CODE}-linux.zip"
          NDK_DIR_NAME="android-ndk-r${NDK_VERSION_CODE}"
          NDK_INSTALL_PATH="$HOME/.buildozer/android/platform/$NDK_DIR_NAME"

          echo "Attempting to create SDK directories and download command-line tools…"
          mkdir -p "$SDK_ROOT"
          
          if [ ! -d "$FINAL_CMDLINE_TOOLS_ROOT" ]; then
            echo "Downloading Android SDK command-line tools…"
            mkdir -p "$TEMP_UNZIP_DIR"
            cd "$TEMP_UNZIP_DIR"
            
            curl -o cmdline-tools.zip "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
            unzip cmdline-tools.zip
            
            UNZIPPED_ROOT_DIR=""
            if [ -d "./cmdline-tools" ]; then
                UNZIPPED_ROOT_DIR="./cmdline-tools"
            elif [ -d "./tools" ]; then
                UNZIPPED_ROOT_DIR="./tools"
            elif [ -d "./latest" ]; then
                UNZIPPED_ROOT_DIR="./latest"
            elif [ -d "./bin" ] && [ -d "./lib" ]; then
                mkdir -p temp_latest_dir
                mv ./bin ./lib temp_latest_dir/
                UNZIPPED_ROOT_DIR="./temp_latest_dir"
            else
                echo "Error: Could not determine the root directory of unzipped command-line tools."
                ls -R .
                exit 1
            fi

            if [ -z "$UNZIPPED_ROOT_DIR" ]; then
                echo "Error: Unzipped command-line tools directory not found or recognized."
                exit 1
            fi

            echo "Moving unzipped command-line tools from '$UNZIPPED_ROOT_DIR' to '$FINAL_CMDLINE_TOOLS_ROOT'…"
            mkdir -p "$FINAL_CMDLINE_TOOLS_ROOT"
            mv "$UNZIPPED_ROOT_DIR"/* "$FINAL_CMDLINE_TOOLS_ROOT/" || true
            mv "$UNZIPPED_ROOT_DIR"/.[!.]* "$FINAL_CMDLINE_TOOLS_ROOT/" 2>/dev/null || true

            cd "$SDK_ROOT"
            rm -rf "$TEMP_UNZIP_DIR"
          fi

          echo "Creating symbolic link for sdkmanager for Buildozer compatibility…"
          mkdir -p "$SDKMANAGER_LEGACY_DIR"
          if [ -f "$SDKMANAGER_MODERN" ] && [ ! -f "$SDKMANAGER_LEGACY_PATH" ]; then
            ln -s "$SDKMANAGER_MODERN" "$SDKMANAGER_LEGACY_PATH"
            echo "Created symlink from '$SDKMANAGER_MODERN' to '$SDKMANAGER_LEGACY_PATH'"
          elif [ -f "$SDKMANAGER_LEGACY_PATH" ]; then
            echo "Symlink for sdkmanager already exists at '$SDKMANAGER_LEGACY_PATH'."
          else
            echo "Warning: Could not create symlink. Modern sdkmanager not found at '$SDKMANAGER_MODERN'."
            ls -la "$FINAL_CMDLINE_TOOLS_ROOT/bin/"
          fi

          echo "Ensuring SDKMANAGER path is correct: $SDKMANAGER_MODERN (modern)"
          if [ ! -f "$SDKMANAGER_MODERN" ]; then
            echo "Error: Modern sdkmanager not found at $SDKMANAGER_MODERN. Check paths or download."
            ls -la "$FINAL_CMDLINE_TOOLS_ROOT/bin"
            ls -la "$FINAL_CMDLINE_TOOLS_ROOT"
            ls -la "$TARGET_CMDLINE_TOOLS_DIR"
            exit 1
          fi

          chmod +x "$SDKMANAGER_MODERN"
          chmod +x "$SDKMANAGER_LEGACY_PATH" || true

          # --- Download and Extract NDK r25b directly if not present ---
          if [ ! -d "$NDK_INSTALL_PATH" ]; then
            echo "Downloading Android NDK $NDK_VERSION_CODE from $NDK_URL…"
            mkdir -p "$HOME/.buildozer/android/platform"
            cd "$HOME/.buildozer/android/platform"
            curl -o ndk.zip "$NDK_URL"
            # Attempt to extract, checking if the unzipped directory exists
            unzip ndk.zip
            if [ ! -d "$NDK_DIR_NAME" ]; then
                echo "Error: NDK did not unzip to expected directory $NDK_DIR_NAME."
                ls -F . # List contents of current directory
                exit 1
            fi
            rm ndk.zip
            echo "NDK $NDK_VERSION_CODE extracted to $NDK_INSTALL_PATH"
          else
            echo "NDK $NDK_VERSION_CODE already exists at $NDK_INSTALL_PATH"
          fi
          
          # --- Symlink NDK if needed (less common for NDK, but for safety) ---
          NDK_EXPECTED_BY_BUILDOZER="$HOME/.buildozer/android/platform/android-ndk-r25b"
          if [ ! -d "$NDK_EXPECTED_BY_BUILDOZER" ] && [ -d "$NDK_INSTALL_PATH" ] && [ "$NDK_INSTALL_PATH" != "$NDK_EXPECTED_BY_BUILDOZER" ]; then
            echo "Creating symlink for NDK from $NDK_INSTALL_PATH to $NDK_EXPECTED_BY_BUILDOZER…"
            ln -s "$NDK_INSTALL_PATH" "$NDK_EXPECTED_BY_BUILDOZER"
          fi


          echo "Accepting all Android SDK licenses…"
          yes | "$SDKMANAGER_MODERN" --licenses || true
          yes | "$SDKMANAGER_MODERN" --licenses || true
          yes | "$SDKMANAGER_MODERN" --licenses || true

          echo "Installing/Updating specific Android SDK components…"
          "$SDKMANAGER_MODERN" "build-tools;$BUILD_TOOLS_VERSION" || true
          "$SDKMANAGER_MODERN" "platform-tools" || true
          "$SDKMANAGER_MODERN" "platforms;android-33" || true

          echo "Listing installed SDK components to verify…"
          "$SDKMANAGER_MODERN" --list | grep "build-tools"
          "$SDKMANAGER_MODERN" --list | grep "platform-tools"
          ls -la "$NDK_INSTALL_PATH" || echo "NDK $NDK_VERSION_CODE directory not found after explicit install."
          ls -la "$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" || echo "Build-tools $BUILD_TOOLS_VERSION directory not found after explicit install."
          ls -la "$SDK_ROOT/platform-tools" || echo "Platform-tools directory not found after explicit install."

          echo "Adding Android SDK tool directories to GITHUB_PATH…"
          echo "$SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" >> $GITHUB_PATH
          echo "$FINAL_CMDLINE_TOOLS_ROOT/bin" >> $GITHUB_PATH
          echo "$SDKMANAGER_LEGACY_DIR" >> $GITHUB_PATH
          echo "$NDK_INSTALL_PATH" >> $GITHUB_PATH

          echo "Ensuring common Android SDK binaries are executable…"
          chmod +x "$SDK_ROOT/platform-tools/adb" || true
          find "$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" -type f -name "aapt*" -exec chmod +x {} \; || true
          find "$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" -type f -name "aidl*" -exec chmod +x {} \; || true
          find "$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" -type f -name "apksigner*" -exec chmod +x {} \; || true
          find "$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" -type f -name "zipalign*" -exec chmod +x {} \; || true

          echo "Ensuring NDK toolchain binaries are executable (more aggressively)…"
          # Find all executables in the NDK toolchain bin directory and make them executable
          find "$NDK_INSTALL_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin" -type f -exec chmod +x {} + || true
          # Explicitly target common NDK tools
          chmod +x "$NDK_INSTALL_PATH/ndk-build" || true
          chmod +x "$NDK_INSTALL_PATH/ndk-gdb" || true
          chmod +x "$NDK_INSTALL_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/clang" || true
          chmod +x "$NDK_INSTALL_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++" || true


          echo "Current PATH after GITHUB_PATH modifications:"
          echo "$PATH"
          echo "Verifying tool execution:"
          adb version || echo "adb not found after PATH update."
          aapt version || echo "aapt not found after PATH update."
          aidl || echo "aidl not found after PATH update." 
          apksigner || echo "apksigner not found after PATH update."
          zipalign || echo "zipalign not found after PATH update."
          ls -la "$NDK_INSTALL_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/clang" || echo "clang not found or bad permissions."
          "$NDK_INSTALL_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/clang" --version || echo "clang not executable or --version not supported."
          "$NDK_INSTALL_PATH/ndk-build" --version || echo "ndk-build not executable or --version not supported."


          echo "Setting ANDROID_HOME, ANDROID_NDK_HOME, ANDROID_SDK_ROOT for all subsequent steps…"
          echo "ANDROID_HOME=$SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$NDK_INSTALL_PATH" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$SDK_ROOT" >> $GITHUB_ENV
          
          echo "P4A_NO_LINK_TO_LOCAL_SDKS=1" >> $GITHUB_ENV 

          echo "ANDROID_HOME is: $ANDROID_HOME"
          echo "ANDROID_NDK_HOME is: $ANDROID_NDK_HOME"
          echo "ANDROID_SDK_ROOT is: $ANDROID_SDK_ROOT"
          echo "P4A_NO_LINK_TO_LOCAL_SDKS is: $P4A_NO_LINK_TO_LOCAL_SDKS"
        shell: bash

      - name: Configure Buildozer and Download remaining SDK/NDK (if any)
        run: |
          SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
          BUILD_TOOLS_VERSION="33.0.2"
          NDK_VERSION_CODE="25b"
          NDK_DIR_NAME="android-ndk-r${NDK_VERSION_CODE}"
          NDK_INSTALL_PATH="$HOME/.buildozer/android/platform/$NDK_DIR_NAME"
          
          CMDLINE_TOOLS_LATEST_BIN="$SDK_ROOT/cmdline-tools/latest/bin"
          SDKMANAGER_LEGACY_DIR="$SDK_ROOT/tools/bin"

          export PATH="$PATH:$SDK_ROOT/platform-tools:$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION:$CMDLINE_TOOLS_LATEST_BIN:$NDK_INSTALL_PATH:$SDKMANAGER_LEGACY_DIR"
          
          export P4A_NO_LINK_TO_LOCAL_SDKS=1

          echo "PATH inside Buildozer step (after explicit export): $PATH"
          echo "P4A_NO_LINK_TO_LOCAL_SDKS inside Buildozer step: $P4A_NO_LINK_TO_LOCAL_SDKS"

          echo "Running buildozer android debug clean and update after SDK setup…"
          buildozer android debug clean || true
          buildozer android debug update || true

      - name: Build Android APK
        run: |
          echo "Running buildozer android debug…"
          # This is the critical command, and it usually contains detailed output.
          # Redirect stderr to stdout to ensure all error messages are captured by the logger.
          buildozer android debug --verbose 2>&1 | tee buildozer_output.log
          
          BUILD_EXIT_CODE=${PIPESTATUS[0]} # Get the exit code of buildozer, not tee
          echo "Buildozer command exited with code: $BUILD_EXIT_CODE"

          APK_FOUND=false
          if ls bin/*.apk 1>/dev/null 2>&1; then
            APK_FOUND=true
            echo "::notice::APK files found in bin/ directory."
          else
            echo "::error::No APK files found in bin/ directory."
          fi

          if [ "$APK_FOUND" = true ]; then
            echo "Buildozer successfully generated APKs. Overriding exit code to success (0)."
            exit 0
          else
            echo "Buildozer failed to generate APKs. Propagating original exit code ($BUILD_EXIT_CODE)."
            echo "::error file=buildozer_output.log::Buildozer output log for detailed errors."
            # Output the log content for easier debugging in the GitHub Actions UI
            cat buildozer_output.log
            exit $BUILD_EXIT_CODE
        shell: bash

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: HushOS-APK
          path: bin/*.apk
          timeout-minutes: 10
