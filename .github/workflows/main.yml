name: Build Kivy Android APK

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main # Trigger on pull requests targeting the main branch
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build_android_apk:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean Buildozer cache
        run: |
          echo "Removing existing .buildozer directory to ensure clean build..."
          rm -rf "$HOME/.buildozer" || true
          rm -rf ".buildozer" || true # Also check local buildozer dir if present
        shell: bash

      - name: Set up Java Development Kit (JDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Recommended distribution
          java-version: '17' # Android API 33 often requires JDK 17

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Using 3.9, which is generally compatible with Kivy/Buildozer

      - name: Install Buildozer and its dependencies
        run: |
          pip install buildozer cython
          sudo apt-get update
          sudo apt-get install -y git zip unzip openjdk-17-jdk autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev liblzma-dev libffi-dev libssl-dev perl
          which perl || echo "perl not found in PATH after install!"
          
          # --- NEW: Ensure setuptools is specifically installed/upgraded first ---
          # This is crucial for distutils compatibility with newer Python/packaging tools.
          python3 -m pip install --upgrade setuptools pip wheel
          
          echo "Verifying pip location:"
          which pip || echo "pip executable not found in PATH!"
          which pip3 || echo "pip3 executable not found in PATH!"
          python3 -c "import sysconfig; print(sysconfig.get_path('scripts'))" # Show where scripts like pip are
          ls -la "$(python3 -c "import sysconfig; print(sysconfig.get_path('scripts'))")" || true # List contents of scripts dir

      - name: Add Google AI API Key to environment (if not already set)
        run: echo "${{ secrets.GOOGLE_AI_API_KEY_SECRET }}" > .env_api_key_temp

      - name: Force correct buildozer.spec settings
        run: |
          echo "Checking buildozer.spec settings..."
          cp buildozer.spec buildozer.spec.backup
          sed -i 's/^android\.build_tools_version.*$/android.build_tools_version = 33.0.2/' buildozer.spec
          sed -i 's/^android\.api.*$/android.api = 33/' buildozer.spec
          sed -i 's/^android\.ndk_version.*$/android.ndk_version = 23.1.7779620/' buildozer.spec # NDK 23b
          sed -i 's/^android\.min_sdk_version.*$/android.min_sdk_version = 21/' buildozer.spec
          
          grep -q "^android\.build_tools_version" buildozer.spec || echo "android.build_tools_version = 33.0.2" >> buildozer.spec
          grep -q "^android\.api" buildozer.spec || echo "android.api = 33" >> buildozer.spec
          grep -q "^android\.ndk_version" buildozer.spec || echo "android.ndk_version = 23.1.7779620" >> buildozer.spec # NDK 23b
          grep -q "^android\.min_sdk_version" buildozer.spec || echo "android.min_sdk_version = 21" >> buildozer.spec # Min SDK Version
          
          echo "Current buildozer.spec Android settings:"
          grep -E "(android.api|android.build_tools_version|android.ndk_version|android.min_sdk_version)" buildozer.spec

      - name: Ensure Android SDK Tools are present and accept licenses
        run: |
          SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
          CMDLINE_TOOLS_BASE_DIR="$SDK_ROOT/cmdline-tools"
          CMDLINE_TOOLS_LATEST_DIR="$CMDLINE_TOOLS_BASE_DIR/latest"
          FINAL_CMDLINE_BIN_DIR="$CMDLINE_TOOLS_LATEST_DIR/bin"
          SDKMANAGER="$FINAL_CMDLINE_BIN_DIR/sdkmanager"
          TEMP_UNZIP_DIR="$HOME/.buildozer/android/platform/temp_unzip"
          BUILD_TOOLS_VERSION="33.0.2"
          NDK_VERSION="23.1.7779620" # NDK 23b

          echo "Attempting to create SDK directories and download command-line tools..."
          mkdir -p "$SDK_ROOT"
          
          if [ ! -d "$CMDLINE_TOOLS_LATEST_DIR" ]; then
            echo "Downloading Android SDK command-line tools..."
            mkdir -p "$TEMP_UNZIP_DIR"
            cd "$TEMP_UNZIP_DIR"
            
            curl -o cmdline-tools.zip "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
            unzip cmdline-tools.zip
            
            mkdir -p "$FINAL_CMDLINE_BIN_DIR"
            if [ -d "./latest/bin" ] && [ "$(ls -A ./latest/bin)" ]; then
              echo "Moving contents from ./cmdline-tools/latest/bin to ${FINAL_CMDLINE_BIN_DIR}"
              mv ./latest/bin/* "$FINAL_CMDLINE_BIN_DIR/"
            elif [ -d "./cmdline-tools/latest/bin" ] && [ "$(ls -A ./cmdline-tools/latest/bin)" ]; then
              echo "Moving contents from ./cmdline-tools/latest/bin to "$FINAL_CMDLINE_BIN_DIR"
              mv ./cmdline-tools/latest/bin/* "$FINAL_CMDLINE_BIN_DIR/"
            elif [ -d "./bin" ] && [ "$(ls -A ./bin)" ]; then
              echo "Moving contents from ./bin to $FINAL_CMDLINE_BIN_DIR"
              mv ./bin/* "$FINAL_CMDLINE_BIN_DIR/"
            else
              echo "Error: Could not find 'bin' directory with sdkmanager in unzipped cmdline-tools."
              ls -R .
              exit 1
            fi
            rm -rf "$TEMP_UNZIP_DIR"
          fi

          cd "$SDK_ROOT"

          echo "Ensuring SDKMANAGER path is correct: $SDKMANAGER"
          if [ ! -f "$SDKMANAGER" ]; then
            echo "Error: sdkmanager not found at $SDKMANAGER. Check paths or download."
            ls -la "$FINAL_CMDLINE_BIN_DIR"
            exit 1
          fi

          chmod +x "$SDKMANAGER"

          echo "Accepting all Android SDK licenses..."
          mkdir -p "$SDK_ROOT/licenses"
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > "$SDK_ROOT/licenses/android-sdk-license"
          echo "84831b9409646a918e30573bab4c9c91346d8abd" > "$SDK_ROOT/licenses/android-sdk-preview-license"
          echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > "$SDK_ROOT/licenses/android-sdk-arm-dbt-license"
          echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$SDK_ROOT/licenses/android-googletv-license"
          echo "79120722343a6f314e0719f863036c702b0e6b2a" > "$SDK_ROOT/licenses/android-sdk-preview-license-old"
          echo "504667f4c0de7af1a06de9f4b1727b84351f2910" > "$SDK_ROOT/licenses/android-sdk-license-old"

          yes | "$SDKMANAGER" --licenses || true
          yes | "$SDKMANAGER" --licenses || true
          yes | "$SDKMANAGER" --licenses || true

          echo "Installing/Updating specific Android SDK components..."
          echo "Installing 'tools' package for broader compatibility..."
          "$SDKMANAGER" "tools" || true

          "$SDKMANAGER" "build-tools;$BUILD_TOOLS_VERSION" || true
          "$SDKMANAGER" "platform-tools" || true
          "$SDKMANAGER" "platforms;android-33" || true
          "$SDKMANAGER" "ndk;$NDK_VERSION" || true 

          echo "Listing installed SDK components to verify..."
          "$SDKMANAGER" --list | grep "build-tools"
          "$SDKMANAGER" --list | grep "platform-tools"
          "$SDKMANAGER" --list | grep "ndk"
          # Corrected: Changed || true # echo "..." to || echo "..." or just removed comment
          ls -la "$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" || echo "Build-tools $BUILD_TOOLS_VERSION directory not found after explicit install."
          ls -la "$SDK_ROOT/platform-tools" || echo "Platform-tools directory not found after explicit install."
          ls -la "$SDK_ROOT/ndk/$NDK_VERSION" || echo "NDK $NDK_VERSION directory not found after explicit install."

          # --- Add ALL necessary Android SDK tool directories to PATH for subsequent steps ---
          echo "Adding Android SDK tool directories to GITHUB_PATH..."
          echo "$SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" >> $GITHUB_PATH
          echo "$FINAL_CMDLINE_BIN_DIR" >> $GITHUB_PATH 
          echo "$SDK_ROOT/ndk/$NDK_VERSION" >> $GITHUB_PATH

          # --- Ensure common binaries are executable (SDK & Build-Tools) ---
          echo "Ensuring common Android SDK binaries are executable..."
          chmod +x "$SDK_ROOT/platform-tools/adb" || true
          find "$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" -type f -name "aapt*" -exec chmod +x {} \; || true
          find "$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" -type f -name "aidl*" -exec chmod +x {} \; || true
          find "$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" -type f -name "apksigner*" -exec chmod +x {} \; || true
          find "$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" -type f -name "zipalign*" -exec chmod +x {} \; || true

          # --- Ensure NDK toolchain binaries are executable ---
          echo "Ensuring NDK toolchain binaries are executable..."
          find "$SDK_ROOT/ndk/$NDK_VERSION/toolchains/llvm/prebuilt/linux-x86_64/bin" -type f -exec chmod +x {} \; || true
          chmod +x "$SDK_ROOT/ndk/$NDK_VERSION/ndk-build" || true
          chmod +x "$SDK_ROOT/ndk/$NDK_VERSION/ndk-gdb" || true


          # Verify PATH update and check tools
          echo "Current PATH after GITHUB_PATH modifications:"
          echo "$PATH"
          echo "Verifying tool execution:"
          adb version || echo "adb not found after PATH update."
          aapt version || echo "aapt not found after PATH update."
          aidl || echo "aidl not found after PATH update." 
          apksigner || echo "apksigner not found after PATH update."
          zipalign || echo "zipalign not found after PATH update."
          ls -la "$SDK_ROOT/ndk/$NDK_VERSION/toolchains/llvm/prebuilt/linux-x86_64/bin/arm-linux-androideabi-clang" || echo "clang not found or bad permissions."
          "$SDK_ROOT/ndk/$NDK_VERSION/toolchains/llvm/prebuilt/linux-x86_64/bin/arm-linux-androideabi-clang" --version || echo "clang not executable or --version not supported."


          # --- Set ANDROID_HOME and ANDROID_NDK_HOME environment variables ---
          echo "Setting ANDROID_HOME, ANDROID_NDK_HOME, ANDROID_SDK_ROOT for all subsequent steps..."
          echo "ANDROID_HOME=$SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$SDK_ROOT/ndk/$NDK_VERSION" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$SDK_ROOT" >> $GITHUB_ENV
          
          # --- Tell python-for-android to NOT use hard links (set globally for job) ---
          echo "P4A_NO_LINK_TO_LOCAL_SDKS=1" >> $GITHUB_ENV 

          echo "ANDROID_HOME is: $ANDROID_HOME"
          echo "ANDROID_NDK_HOME is: $ANDROID_NDK_HOME"
          echo "ANDROID_SDK_ROOT is: $ANDROID_SDK_ROOT"
          echo "P4A_NO_LINK_TO_LOCAL_SDKS is: $P4A_NO_LINK_TO_LOCAL_SDKS"

      - name: Configure Buildozer and Download remaining SDK/NDK (if any)
        run: |
          # Re-export all necessary Android SDK paths for this shell session, for robustness
          SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
          BUILD_TOOLS_VERSION="33.0.2"
          NDK_VERSION="23.1.7779620"
          CMDLINE_TOOLS_LATEST_BIN="$SDK_ROOT/cmdline-tools/latest/bin"

          export PATH="$PATH:$SDK_ROOT/platform-tools:$SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION:$CMDLINE_TOOLS_LATEST_BIN:$SDK_ROOT/ndk/$NDK_VERSION"
          
          # Explicitly export P4A_NO_LINK_TO_LOCAL_SDKS for this shell session
          export P4A_NO_LINK_TO_LOCAL_SDKS=1

          echo "PATH inside Buildozer step (after explicit export): $PATH" # For debugging
          echo "P4A_NO_LINK_TO_LOCAL_SDKS inside Buildozer step: $P4A_NO_LINK_TO_LOCAL_SDKS" # For debugging

          echo "Running buildozer android debug clean and update after SDK setup..."
          buildozer android debug clean || true
          buildozer android debug update || true

      - name: Build Android APK
        run: |
          buildozer android debug --verbose
          # Check the exit code of the last command (buildozer)
          BUILD_EXIT_CODE=$?
          echo "Buildozer command exited with code: $BUILD_EXIT_CODE"
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "::error::Buildozer reported success but returned non-zero exit code ($BUILD_EXIT_CODE)."
            exit $BUILD_EXIT_CODE
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: HushOS-APK
          path: bin/*.apk # Buildozer outputs APKs into the 'bin' directory
          timeout-minutes: 10
