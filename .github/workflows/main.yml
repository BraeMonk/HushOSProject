name: Build Kivy Android APK

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main # Trigger on pull requests targeting the main branch
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build_android_apk:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean Buildozer cache
        run: |
          echo "Removing existing .buildozer directory to ensure clean build…"
          rm -rf "$HOME/.buildozer" || true
          rm -rf ".buildozer" || true # Also check local buildozer dir if present
        shell: bash

      - name: Set up Java Development Kit (JDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Recommended distribution
          java-version: '17' # Android API 33 often requires JDK 17

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Using 3.9, which is generally compatible with Kivy/Buildozer

      - name: Install Buildozer and its dependencies
        run: |
          pip install buildozer cython
          sudo apt-get update
          sudo apt-get install -y git zip unzip openjdk-17-jdk autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev liblzma-dev libffi-dev libssl-dev perl
          which perl || echo "perl not found in PATH after install!"
          
          python3 -m pip install --upgrade setuptools pip wheel
          
          echo "Verifying pip location:"
          which pip || echo "pip executable not found in PATH!"
          which pip3 || echo "pip3 executable not found in PATH!"
          python3 -c "import sysconfig; print(sysconfig.get_path('scripts'))" # Show where scripts like pip are
          ls -la "$(python3 -c "import sysconfig; print(sysconfig.get_path('scripts'))")" || true # List contents of scripts dir

      - name: Add Google AI API Key to environment (if not already set)
        run: echo "${{ secrets.GOOGLE_AI_API_KEY_SECRET }}" > .env_api_key_temp

      - name: Force correct buildozer.spec settings
        run: |
          echo "Checking buildozer.spec settings…"
          cp buildozer.spec buildozer.spec.backup
          sed -i 's/^android\.build_tools_version.*$/android.build_tools_version = 33.0.2/' buildozer.spec
          sed -i 's/^android\.api.*$/android.api = 33/' buildozer.spec
          sed -i 's/^android\.ndk_version.*$/android.ndk_version = 25b/' buildozer.spec 
          sed -i 's/^android\.min_sdk_version.*$/android.min_sdk_version = 21/' buildozer.spec
          
          grep -q "^android\.build_tools_version" buildozer.spec || echo "android.build_tools_version = 33.0.2" >> buildozer.spec
          grep -q "^android\.api" buildozer.spec || echo "android.api = 33" >> buildozer.spec
          grep -q "^android\.ndk_version" buildozer.spec || echo "android.ndk_version = 25b" >> buildozer.spec 
          grep -q "^android\.min_sdk_version" buildozer.spec || echo "android.min_sdk_version = 21" >> buildozer.spec 
          
          echo "Current buildozer.spec Android settings:"
          grep -E "(android.api|android.build_tools_version|android.ndk_version|android.min_sdk_version)" buildozer.spec

      - name: Ensure Android SDK Tools and NDK are present and accept licenses
        run: |
          SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
          TARGET_CMDLINE_TOOLS_DIR="$SDK_ROOT/cmdline-tools"
          FINAL_CMDLINE_TOOLS_ROOT="$TARGET_CMDLINE_TOOLS_DIR/latest"
          SDKMANAGER_MODERN="$FINAL_CMDLINE_TOOLS_ROOT/bin/sdkmanager"
          SDKMANAGER_LEGACY_DIR="$SDK_ROOT/tools/bin"
          SDKMANAGER_LEGACY_PATH="$SDKMANAGER_LEGACY_DIR/sdkmanager"

          TEMP_UNZIP_DIR="$HOME/.buildozer/android/platform/temp_unzip"
          BUILD_TOOLS_VERSION="33.0.2"
          NDK_VERSION_CODE="25b"
          NDK_URL="https://dl.google.com/android/repository/android-ndk-r${NDK_VERSION_CODE}-linux.zip"
          NDK_DIR_NAME="android-ndk-r${NDK_VERSION_CODE}"
          NDK_INSTALL_PATH="$HOME/.buildozer/android/platform/$NDK_DIR_NAME"

          echo "Attempting to create SDK directories and download command-line tools…"
          mkdir -p "$SDK_ROOT"
          
          if [ ! -d "$FINAL_CMDLINE_TOOLS_ROOT" ]; then
            echo "Downloading Android SDK command-line tools…"
            mkdir -p "$TEMP_UNZIP_DIR"
            cd "$TEMP_UNZIP_DIR"
            
            curl -o cmdline-tools.zip "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
            unzip cmdline-tools.zip
            
            UNZIPPED_ROOT_DIR=""
            if [ -d "./cmdline-tools" ]; then
                UNZIPPED_ROOT_DIR="./cmdline-tools"
            elif [ -d "./tools" ]; then
                UNZIPPED_ROOT_DIR="./tools"
            elif [ -d "./latest" ]; then
                UNZIPPED_ROOT_DIR="./latest"
            elif [ -d "./bin" ] && [ -d "./lib" ]; then
                mkdir -p temp_latest_dir
                mv ./bin ./lib temp_latest_dir/
                UNZIPPED_ROOT_DIR="./temp_latest_dir"
            else
                echo "Error: Could not determine the root directory of unzipped command-line tools."
                ls -R .
                exit 1
            fi

            if [ -z "$UNZIPPED_ROOT_DIR" ]; then
                echo "Error: Unzipped command-line tools directory not found or recognized."
                exit 1
            fi

            echo "Moving unzipped command-line tools from '$UNZIPPED_ROOT_DIR' to '$FINAL_CMDLINE_TOOLS_ROOT'…"
            mkdir -p "$FINAL_CMDLINE_TOOLS_ROOT"
            mv "$UNZIPPED_ROOT_DIR"/* "$FINAL_CMDLINE_TOOLS_ROOT/" || true
            mv "$UNZIPPED_ROOT_DIR"/.[!.]* "$FINAL_CMDLINE_TOOLS_ROOT/" 2>/dev/null || true

            cd "$SDK_ROOT"
            rm -rf "$TEMP_UNZIP_DIR"
          fi

          echo "Creating symbolic link for sdkmanager for Buildozer compatibility…"
          mkdir -p "$SDKMANAGER_LEGACY_DIR"
          if [ -f "$SDKMANAGER_MODERN" ] && [ ! -f "$SDKMANAGER_LEGACY_PATH" ]; then
            ln -s "$SDKMANAGER_MODERN" "$SDKMANAGER_LEGACY_PATH"
            echo "Created symlink from '$SDKMANAGER_MODERN' to '$SDKMANAGER_LEGACY_PATH'"
          elif [ -f "$SDKMANAGER_LEGACY_PATH" ]; then
            echo "Symlink for sdkmanager already exists at '$SDKMANAGER_LEGACY_PATH'."
          else
            echo "Warning: Could not create symlink. Modern sdkmanager not found at '$SDKMANAGER_MODERN'."
            ls -la "$FINAL_CMDLINE_TOOLS_ROOT/bin/"
          fi

          echo "Ensuring SDKMANAGER path is correct: $SDKMANAGER_MODERN (modern)"
          if [ ! -f "$SDKMANAGER_MODERN" ]; then
            echo "Error: Modern sdkmanager not found at $SDKMANAGER_MODERN. Check paths or download."
            ls -la "$FINAL_CMDLINE_TOOLS_ROOT/bin"
            ls -la "$FINAL_CMDLINE_TOOLS_ROOT"
            ls -la "$TARGET_CMDLINE_TOOLS_DIR"
            exit
