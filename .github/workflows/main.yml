# This is the definitive, foolproof GitHub Actions workflow for building your Kivy app.
# It uses the modern Ubuntu 22.04 runner, manually installs legacy dependencies,
# and fully prepares the Android SDK environment before running Buildozer.
name: Build HushOS for Android
on:
  push:
    branches: [ "main" ]

jobs:
  build-android:
    # Use the stable and supported Ubuntu 22.04 runner
    runs-on: ubuntu-22.04

    steps:
      # 1. Check out your repository's code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Java Development Kit (JDK) version 17
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Set up the Android SDK environment
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # 4. Install all necessary system-level dependencies
      - name: Install system dependencies
        run: |
          # Manually add the Ubuntu 20.04 (Focal) repository to get libtinfo5
          echo "deb http://archive.ubuntu.com/ubuntu/ focal main universe" | sudo tee /etc/apt/sources.list.d/focal.list
          sudo apt-get update
          # Install all dependencies, including the now-available libtinfo5
          sudo apt-get install -y --allow-unauthenticated \
          git zip unzip autoconf libtool pkg-config \
          zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake libffi-dev libssl-dev

      # 5. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # 6. Install Python build tools
      - name: Install Buildozer and Cython
        run: |
          pip install --upgrade pip
          pip install --user buildozer==1.5.0
          pip install --user cython==0.29.34

      # 7. Add Buildozer to PATH
      - name: Add Buildozer to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      # 8. Install SDK and NDK components
      - name: Install SDK and NDK components
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          # Install SDK tools, platform, build-tools, and NDK (version 25b is a safe choice)
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" "platforms;android-31" "build-tools;34.0.0" "ndk;25.2.9519653"

      # 9. Configure buildozer.spec to use existing Android environment
      - name: Configure buildozer.spec
        run: |
          # Dynamically find the NDK path, as its folder name can vary
          export NDK_PATH=$(ls -d $ANDROID_HOME/ndk/* | tail -1)
          
          # Use sed to update the buildozer.spec file, forcing it to use the system SDK/NDK
          sed -i "s|^#? *android.sdk_path *=.*|android.sdk_path = $ANDROID_HOME|g" buildozer.spec
          sed -i "s|^#? *android.ndk_path *=.*|android.ndk_path = $NDK_PATH|g" buildozer.spec
          
          echo "INFO: buildozer.spec configured to use system Android environment."

      # 10. Run Buildozer to compile the APK
      - name: Run Buildozer
        run: buildozer -v android debug

      # 11. Upload the final .apk file as a downloadable artifact
      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: HushOS-APK
          path: bin/*.apk
