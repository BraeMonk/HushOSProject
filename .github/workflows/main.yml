name: Build Kivy Android APK

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main # Trigger on pull requests targeting the main branch
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build_android_apk:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java Development Kit (JDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Recommended distribution
          java-version: '17' # Android API 33 often requires JDK 17

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Using 3.9, which is generally compatible with Kivy/Buildozer

      - name: Install Buildozer and its dependencies
        run: |
          pip install buildozer cython
          sudo apt-get update
          sudo apt-get install -y git zip unzip openjdk-17-jdk autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev liblzma-dev libffi-dev libssl-dev

      - name: Add Google AI API Key to environment (if not already set)
        # This is a placeholder. You should securely set this as a GitHub Secret.
        # Replace 'YOUR_GOOGLE_AI_API_KEY' with the actual secret name if you've set it.
        run: echo "${{secrets.SECRET_API_KEY}}" > .env_api_key_temp # DO NOT DO THIS IN PRODUCTION, USE SECRETS!

      - name: Force correct buildozer.spec settings
        run: |
          echo "Checking buildozer.spec settings..."

          # Backup original
          cp buildozer.spec buildozer.spec.backup

          # Force the correct versions
          sed -i 's/android.build_tools_version.*/android.build_tools_version = 33.0.2/' buildozer.spec
          sed -i 's/android.api.*/android.api = 33/' buildozer.spec
          sed -i 's/android.ndk_version.*/android.ndk_version = 25.2.9519653/' buildozer.spec

          # Add these lines if they don't exist
          grep -q "android.build_tools_version" buildozer.spec || echo "android.build_tools_version = 33.0.2" >> buildozer.spec
          grep -q "android.api" buildozer.spec || echo "android.api = 33" >> buildozer.spec
          grep -q "android.ndk_version" buildozer.spec || echo "android.ndk_version = 25.2.9519653" >> buildozer.spec

          # Show the relevant lines
          echo "Current buildozer.spec Android settings:"
          grep -E "(android.api|android.build_tools_version|android.ndk_version)" buildozer.spec

      - name: Configure Buildozer, Accept Licenses and Download SDK/NDK
        # This step runs buildozer for the first time.
        # Buildozer will automatically download the SDK and NDK and *attempt* to accept licenses.
        # We'll then use sdkmanager explicitly to ensure licenses are accepted.
        run: |
          echo "Running initial buildozer debug clean to trigger SDK/NDK download and license prompts..."
          # Running a clean and then a debug update ensures Buildozer attempts to get components.
          buildozer android debug clean || true # Allow failure here, as it might fail due to licenses
          buildozer android debug update || true # Allow failure here

          # Now, explicitly accept all licenses.
          # This needs to be done *after* sdkmanager might have been run by buildozer
          # and possibly created the necessary directories.
          SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
          SDKMANAGER="$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"

          echo "Ensuring SDK licenses are accepted using sdkmanager..."
          # Create licenses directory if it doesn't exist
          mkdir -p "$SDK_ROOT/licenses"

          # Use printf to send 'y' for all prompts
          # Run multiple times to catch all potential license agreements
          yes | "$SDKMANAGER" --licenses || true
          yes | "$SDKMANAGER" --licenses || true # Run again for good measure

          echo "Installing specific Android SDK components..."
          # Install build-tools version that matches buildozer.spec
          "$SDKMANAGER" "build-tools;33.0.2" "platform-tools" "platforms;android-33" "ndk;25.2.9519653" || true

          echo "Verifying build-tools installation..."
          ls -la "$SDK_ROOT/build-tools/" || echo "Build-tools directory not found after explicit install."

      - name: Build Android APK
        # This is the actual build command. It uses the configured buildozer.spec.
        # With licenses accepted and tools installed, this should now succeed.
        run: buildozer android debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: HushOS-APK
          path: bin/*.apk # Buildozer outputs APKs into the 'bin' directory
